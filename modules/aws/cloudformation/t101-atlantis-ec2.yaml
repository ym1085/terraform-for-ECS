# 참고 자료
# https://lakescript.net/entry/T101-5-2-Terraform-Terraform-RunnerAtlantis
# https://okms1017.tistory.com/70
# https://kim-dragon.tistory.com/253
AWSTemplateFormatVersion: "2010-09-09"

# 메타 데이터 작성 및 파라미터 그룹화 영역
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: "<<<<< Deploy EC2 >>>>>" # EC2 서버 설정
      Parameters:
      - KeyName # EC2에 사용할 SSH 키 이름
      - SgIngressSshCidr # SSH 접근을 허용할 CIDR 블록
      - MyInstanceType # 인스턴스 타입(ex: t3.micro)
      - LatestAmiId # 사용할 최신 AMI ID

    - Label:
        default: "<<<<< Region AZ >>>>>" # AWS Region 설정
      Parameters:
      - TargetRegion # 배포할 AWS 리전
      - AvailabilityZone1 # 첫 번째 가용 영역(AZ)
      - AvailabilityZone2 # 두 번째 가용 영역(AZ)

    - Label:
        default: "<<<<< VPC Subnet >>>>>" # VPC 관련 설정
      Parameters:
      - VpcBlock # VPC CIDR Block 지정
      - PublicSubnet1Block # 첫 번째 Public Subnet 지정
      - PublicSubnet2Block # 두 번째 Public Subnet 지정 (TODO: 필요한가?)

Parameters:
  KeyName:
    # EC2에 사용할 SSH 키 이름
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SgIngressSshCidr:
    # SSH 접근을 허용할 CIDR 블록
    Description: The IP address range that can be used to communicate to the EC2 instances.
    Type: String
    MinLength: "9"
    MaxLength: "18"
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  MyInstanceType:
    # 인스턴스 타입(ex: t3.micro)
    Description: Enter EC2 Type(Spec) Ex) t3.micro.
    Type: String
    Default: t3.medium
  LatestAmiId:
    # 사용할 최신 AMI ID
    Description: (DO NOT CHANGE)
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/canonical/ubuntu/server/22.04/stable/current/amd64/hvm/ebs-gp2/ami-id"
    AllowedValues:
    - /aws/service/canonical/ubuntu/server/22.04/stable/current/amd64/hvm/ebs-gp2/ami-id

  TargetRegion:
    Type: String
    Default: ap-northeast-2
  AvailabilityZone1:
    Type: String
    Default: ap-northeast-2a
  # AvailabilityZone2:
  #   Type: String
  #   Default: ap-northeast-2c

  VpcBlock:
    Type: String
    Default: 172.22.0.0/16
  PublicSubnet1Block:
    Type: String
    Default: 10.10.1.0/24
  PublicSubnet2Block:
    Type: String
    Default: 10.10.2.0/24

Resources:
  # VPC
  TerraformVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: Terraform-VPC

  # PublicSubnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone1
      CidrBlock: !Ref PublicSubnet1Block
      VpcId: !Ref TerraformVPC
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: Terraform-PublicSubnet1
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone2
      CidrBlock: !Ref PublicSubnet2Block
      VpcId: !Ref TerraformVPC
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: Terraform-PublicSubnet2

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref TerraformVPC

  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TerraformVPC
      Tags:
      - Key: Name
        Value: Terraform-PublicSubnetRouteTable
  PublicSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicSubnetRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicSubnetRouteTable

  # EC2 Hosts
  EC2SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Terraform EC2 Security Group
      VpcId: !Ref TerraformVPC
      Tags:
      - Key: Name
        Value: Terraform-SG
      SecurityGroupIngress:
      - IpProtocol: "-1"
        CidrIp: !Ref SgIngressSshCidr
      - IpProtocol: tcp
        FromPort: 4141
        ToPort: 4141
        CidrIp: 0.0.0.0/0

  EC21:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref MyInstanceType
      ImageId: !Ref LatestAmiId
      KeyName: !Ref KeyName
      Tags:
      - Key: Name
        Value: Atlantis
      NetworkInterfaces:
      - DeviceIndex: 0
        SubnetId: !Ref PublicSubnet1
        GroupSet:
        - !Ref EC2SG
        AssociatePublicIpAddress: true
        PrivateIpAddress: 10.10.1.10
      BlockDeviceMappings:
      - DeviceName: /dev/sda1
        Ebs:
          VolumeType: gp3
          VolumeSize: 30
          DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          hostnamectl --static set-hostname Atlantis

          # Config convenience
          echo 'alias vi=vim' >> /etc/profile
          echo "sudo su -" >> /home/ubuntu/.bashrc

          # Install Packages & Terraform
          wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          apt update -qq && apt install tree jq unzip zip terraform -y

          # Install aws cli version2
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install

          # Install atlantis
          wget https://github.com/runatlantis/atlantis/releases/download/v0.28.3/atlantis_linux_amd64.zip -P /root
          unzip /root/atlantis_linux_amd64.zip -d /root && rm -rf /root/atlantis_linux_amd64.zip

Outputs:
  eksctlhost:
    Value: !GetAtt EC21.PublicIp
